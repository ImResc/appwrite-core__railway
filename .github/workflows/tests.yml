name: "Tests"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: [pull_request]
jobs:
  build:
    name: Unit & E2E
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2
        # Fetch submodules
        submodules: recursive

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    # This is a separate action that sets up buildx runner
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Appwrite
      uses: docker/build-push-action@v3
      with:
        context: .
        push: false
        tags: appwrite-dev
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DEBUG=false
          TESTING=true
          VERSION=dev

    - name: Start Appwrite
      run:  |
        docker compose up -d
        sleep 30

    - name: Doctor
      run: docker compose exec -T appwrite doctor

    - name: Environment Variables
      run:  docker compose exec -T appwrite vars

    # - name: Run Tests
    #   run: docker compose exec -T appwrite test --debug
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build  # This ensures that the tests job runs only after the build job is completed.

    steps:
      - name: Run Unit Tests
        run: docker compose exec appwrite test /usr/src/code/tests/unit

  account_test:
    name: Account e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for account service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Account
  
  avatar_test:
    name: Avatar e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for avatar service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Avatar

  databases_test:
    name: Databases e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for databases service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Databases
  
  functions_test:
    name: Functions e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for functions service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Functions

  graphql_test:
    name: Graphql e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for graphql service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/GraphQl
  
  health_test:
    name: Health e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for health service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Health
  
  locale_test:
    name: Locale e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for locale service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Locale

  storage_test:
    name: Storage e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for storage service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Storage

  teams_test:
    name: Teams e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for teams service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Teams

  users_test:
    name: Users e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for users service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Users

  webhooks_test:
    name: Webhooks e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for webhooks service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Webhooks

  realtime_test:
    name: Realtime e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for realtime service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Realtime
  
  console_test:
    name: Console e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for console service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Console

  project_test:
    name: Project e2e Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run e2e Tests for project service
        run: docker compose exec appwrite test /usr/src/code/tests/e2e/Services/Projects
  
  
